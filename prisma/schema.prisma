// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  email              String         @unique
  password           String?
  otp                String?
  otpCreatedAt       DateTime?
  isVerified         Boolean        @default(false)
  role               String         @default("user")
  resetPasswordToken String?
  googleId           String?
  courses            Course[]       @relation("UserToCourse")
  tracking           Tracking[]
  userProfile        UserProfile?
  notification       Notification[]
  enrollment         Enrollment[]
  payment            Payment[]
}

model UserProfile {
  id             Int     @id @default(autoincrement())
  profilePicture String?
  fullName       String
  phoneNumber    String? @unique
  city           String?
  country        String?
  userId         Int     @unique
  user           User    @relation(fields: [userId], references: [id])
}

model Category {
  id           Int      @id @default(autoincrement())
  categoryName String   @unique
  categoryImg  String?
  course       Course[]
}

model Course {
  id               Int          @id @default(autoincrement())
  courseName       String
  price            Int
  averageRating    Decimal?
  level            String
  aboutCourse      String
  targetAudience   String
  learningMaterial String
  mentor           String
  isPremium        Boolean
  videoURL         String
  forumURL         String
  duration         String
  courseImg        String?
  chapter          Chapter[]
  enrollment       Enrollment[]
  payment          Payment[]
  user             User[]       @relation("UserToCourse")
  createdAt        String
  updatedAt        String
  categoryId       Int
  category         Category     @relation(fields: [categoryId], references: [id])
  promotionId      Int?
  promotion        Promotion?   @relation(fields: [promotionId], references: [id])
  Tracking         Tracking[]
}

model Chapter {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt String
  updatedAt String
  duration  String   @default("0")
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  lesson    Lesson[]
}

model Lesson {
  id         Int        @id @default(autoincrement())
  lessonName String
  videoURL   String
  createdAt  String
  updatedAt  String
  chapterId  Int
  tracking   Tracking[]
  chapter    Chapter    @relation(fields: [chapterId], references: [id])
}

model Promotion {
  id        Int      @id @default(autoincrement())
  discount  Decimal
  startDate String
  endDate   String
  course    Course[]
}

model Notification {
  id        Int     @id @default(autoincrement())
  title     String
  message   String
  isRead    Boolean @default(false)
  createdAt String
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
}

model Enrollment {
  id        Int     @id @default(autoincrement())
  createdAt String
  userId    Int?
  user      User?   @relation(fields: [userId], references: [id])
  courseId  Int?
  course    Course? @relation(fields: [courseId], references: [id])
  progres   Decimal @default(0)
  review    Review?
}

model Payment {
  id            Int    @id @default(autoincrement())
  amount        Int
  status        String @default("Unpaid")
  methodPayment String
  paymentCode   String
  createdAt     String
  updatedAt     String
  userId        Int
  user          User   @relation(fields: [userId], references: [id])
  courseId      Int
  course        Course @relation(fields: [courseId], references: [id])
}

model Tracking {
  id        Int     @id @default(autoincrement())
  status    Boolean @default(false)
  createdAt String
  updatedAt String
  userId    Int?
  user      User?   @relation(fields: [userId], references: [id])
  lessonId  Int?
  lesson    Lesson? @relation(fields: [lessonId], references: [id])
  courseId  Int?
  course    Course? @relation(fields: [courseId], references: [id])
}

model Review {
  id           Int        @id @default(autoincrement())
  userRating   Int
  userComment  String?
  createdAt    String
  enrollmentId Int        @unique
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
}
